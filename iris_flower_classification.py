# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rX4BaFSEpqDtRXpGUdMZYxAPwywy9qGI

NAME - DEVANSHU KUMAR




TASK - 1





PROJECT NAME- IRIS FLOWER CLASSIFICATION
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# %matplotlib inline

data = pd.read_csv('/content/Iris Flower - Iris.csv')

data = data.rename(columns={'SepalLengthCm':'Sepal_Length',
                           'SepalWidthCm':'Sepal_Width',
                           'PetalLengthCm':'Petal_Length',
                           'PetalWidthCm':'Petal_Width'})

data.isnull().sum()

data.describe()

sns.FacetGrid(data, hue='Species',height=6).map(plt.scatter,'Petal_Length','Sepal_Width').add_legend()

sns.pairplot(data[['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width','Species']],hue='Species',diag_kind='kde')

iris=data.values

X=iris[:,0:4]
Y=iris[:,5]

print(X.shape)
print(X)

print(Y.shape)
print(Y)

# split the train dataset

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)

print(X_train.shape)
print(X_train)

print(X_test.shape)
print(X_test)

print(Y_train.shape)
print(Y_train)

print(Y_test.shape)
print(Y_test)

# MODEL 1: SUPPORT VECTOR MACHINE ALGORITHM

from sklearn.svm import SVC

model_svc=SVC()
model_svc.fit(X_train,Y_train)

prediction1 = model_svc.predict(X_test)

#claculate the accuracy

from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,prediction1))

# model 2 logesticregression


# converting cat.. to numbers

flower_mapping = {'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2}
data['Species'] = data['Species'].map(flower_mapping)

data.head()

data.tail()

# preparing input and output

X = data[['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width']].values
Y = data[['Species']].values

# Logestic Regression

from sklearn.linear_model import LogisticRegression

model=LogisticRegression()
model.fit(X,Y)

model.score(X,Y)

# making predicton of all data set

expected = Y
predicted = model.predict(X)
predicted

# summarize the fit model

from sklearn import metrics
print(metrics.classification_report(expected,predicted))

print(metrics.confusion_matrix(expected,predicted))

# new data prediction
new = np.array([[3,2,1,0.2],[4.9,2.2,3.8,1.1],[5.3,2.5,4.6,1.9]])

predicted_sizes= model.predict(new)

print(predicted_sizes)